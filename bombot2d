import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class DriveSubsystem extends SubsystemBase {
    private final Encoder leftEncoder = new Encoder(0, 1);
    private final Encoder rightEncoder = new Encoder(2, 3);

    private final DifferentialDriveOdometry odometry;
    
    // Başlangıç pozisyonu (0,0) ve açısı 0 derece
    private Pose2d pose = new Pose2d(0, 0, new Rotation2d(0));

    public DriveSubsystem() {
        odometry = new DifferentialDriveOdometry(new Rotation2d(0), 0, 0);
    }

    @Override
    public void periodic() {
        // Encoder değerlerinden mesafeyi al
        double leftDistance = leftEncoder.getDistance();
        double rightDistance = rightEncoder.getDistance();

        // Odometriyi güncelle
        pose = odometry.update(new Rotation2d(getGyroAngle()), leftDistance, rightDistance);

        // SmartDashboard'a yazdır
        SmartDashboard.putNumber("X Pozisyonu", pose.getX());
        SmartDashboard.putNumber("Y Pozisyonu", pose.getY());
        SmartDashboard.putNumber("Açı (Derece)", pose.getRotation().getDegrees());
    }

    public Pose2d getPose() {
        return pose;
    }

    private double getGyroAngle() {
        // Eğer bir gyro sensörü kullanıyorsanız, buradan açıyı alın
        return 0; // Örneğin: gyro.getAngle();
    }
}

import edu.wpi.first.wpilibj2.command.CommandBase;

public class DriveToPositionCommand extends CommandBase {
    private final DriveSubsystem driveSubsystem;
    private final Pose2d targetPose;

    public DriveToPositionCommand(DriveSubsystem driveSubsystem, Pose2d targetPose) {
        this.driveSubsystem = driveSubsystem;
        this.targetPose = targetPose;
        addRequirements(driveSubsystem);
    }

    @Override
    public void execute() {
        Pose2d currentPose = driveSubsystem.getPose();

        // Basit bir hata düzeltme algoritması
        double errorX = targetPose.getX() - currentPose.getX();
        double errorY = targetPose.getY() - currentPose.getY();

        double speedX = errorX * 0.5; // Basit P kontrolü
        double speedY = errorY * 0.5;

        // Robotun hızını ayarla
        driveSubsystem.drive(speedX, speedY);
    }

    @Override
    public boolean isFinished() {
        return driveSubsystem.getPose().equals(targetPose);
    }
}
